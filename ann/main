import numpy as np
import pandas as pd
import math
import copy
import matplotlib.pyplot as plt

X = pd.read_csv("mnist/mnist_train.csv")
np.random.seed(200)
np.random.shuffle(np.asarray(X))
Y = X["label"]
X = X.drop("label",axis=1)
X = np.asarray(X)
Y = np.asarray(Y)

_X = pd.read_csv("mnist/mnist_test.csv")
_Y = _X["label"]
_X = _X.drop(["label"],axis=1)
_X = np.asarray(_X)
_Y = np.asarray(_Y)

global in_size,hidden1_size,hidden2_size,class_size
in_size= X.shape[1]
hidden1_size = 200
hidden2_size = 200
class_size = 10

Y_enc = one_hot(Y,class_size)
_Y_enc = one_hot(_Y,class_size)

batch_size = 10
batches,batch_labels = mini_batches(X,Y_enc,batch_size=batch_size)
_batches,_batch_labels = mini_batches(_X,_Y_enc,batch_size=batch_size)
d = batches.pop(-1)
_d = _batches.pop(-1)

net = Network()
net.add_layers(batch_size,in_size)
net.add_layers(batch_size,hidden1_size)
#net.add_layers(batch_size,hidden2_size)
net.add_layers(batch_size,class_size)
net.add_layers(batch_size,class_size)
net.init_variables(in_size,hidden1_size,vtype="weight")
net.init_variables(1,hidden1_size,vtype="bias")
#net.init_variables(hidden1_size,hidden2_size,vtype="weight")
#net.init_variables(1,hidden2_size,vtype="bias")
net.init_variables(hidden2_size,class_size,vtype="weight")
net.init_variables(1,class_size,vtype="bias")

epochs = 10
train_accuracy = []
test_accuracy = []
for epoch in range(epochs):
    lr = float(input("Enter learning rate: "))
    train(batches,net.layers,net.weights,net.biases,batch_labels,lr)
    prediction = predict(batches,net.layers,net.weights,net.biases,batch_labels)
    _prediction = predict(_batches,net.layers,net.weights,net.biases,_batch_labels)
    train_acc = (prediction==Y[0:Y.shape[0]-len(d)]).sum()/X.shape[0]
    test_acc = (_prediction==_Y[0:_Y.shape[0]-len(_d)]).sum()/_X.shape[0]
    print(train_acc)
    print(test_acc)
    train_accuracy.append(train_acc)
    test_accuracy.append(test_acc)

